name: pesuratan

on:
  push:
    branches:
      - '*'
jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Login to Dockerhub'
        uses: 085300/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 'Build and push'
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/book-store .
          docker push ${{ secrets.DOCKERHUB_USERNAME}}/book-store
      - name: 'Write config'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/oci_api_key.pem
          echo "${{secrets.OCI_KEY_PUBLIC}}" >> ~/.oci/oci_api_key_public.pem
      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/oci_api_key.pem
      - name: 'Check Existing MySQL Database'
        run: |
          echo "MySQL_ID=$( \
            oci mysql db-system list \
            --lifecycle-state ACTIVE \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-name book-store \
            --query 'data[0].id' \
            --raw-output \
            )" >> $GITHUB_ENV
      - name: 'Create MySQL Database'
        if: ${{!env.MySQL_ID}}
        run: |
          echo "MySQL_ID=$( \
            oci mysql db-system create \
            --admin-password ${{ secrets.DB_PASS }} \
            --admin-username ${{ secrets.DB_USER }} \
            -c ${{secrets.VM_COMPARTMENT_OCID}} \
            --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
            --shape-name MySQL.VM.Standard.E3.1.8GB \
            --display-name book-store \
            --subnet-id ${{secrets.VM_SUBNET_OCID}} \
            --wait-for-state SUCCEEDED \
            --query 'data.resources[0].identifier' \
            --raw-output \
            --data-storage-size-in-gbs 50 \
          )" >> $GITHUB_ENV
      - name: 'Get MySQL Database IP'
        run: |
          echo "MySQL_IP=$( \
            oci mysql db-system get \
            --db-system-id ${{env.MySQL_ID}} \
            --query 'data."ip-address"' \
            --raw-output \
            )" >> $GITHUB_ENV
      - name: 'Check Existing Instance'
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance list \
            --lifecycle-state RUNNING \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-name book-store \
            --query "data [0].id" \
            --raw-output \
            )" >> $GITHUB_ENV
      - name: 'Create Instance'
        if: ${{!env.INSTANCE_OCID}}
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance launch \
            -c ${{secrets.VM_COMPARTMENT_OCID}} \
            --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
            --shape ${{secrets.VM_SHAPE}} \
            --shape-config '{"memoryInGBs": 1, "ocpus": 1}' \
            --assign-public-ip true \
            --display-name book-store \
            --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
            --ssh-authorized-keys-file /home/runner/.oci/oci_api_key_public.pem \
            --subnet-id ${{secrets.VM_SUBNET_OCID}} \
            --wait-for-state RUNNING \
            --query "data.id" \
            --raw-output \
            )" >> $GITHUB_ENV
      - name: 'Get Instance IP'
        run: |
          echo "INSTANCE_IP=$( \
            oci compute instance list-vnics \
            --instance-id ${{env.INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
            )" >> $GITHUB_ENV
          echo Instance IP: ${{ env.INSTANCE_IP }}
      - name: 'Wait for SSH'
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
          sleep 5
          echo "SSH not available..."
          done; echo "SSH ready!"
      - name: 'Deploy Deployment Configuration'
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.OCI_KEY_FILE }}
          source: "docker-compose.yml"
          target: "./"


      - name: 'Running Docker Compose'
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.INSTANCE_IP}}
          username: opc
          key: ${{secrets.OCI_KEY_FILE}}
          command_timeout: 200m
          script: |
            sudo yum install -y yum-utils curl
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl restart docker
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            sudo firewall-cmd --zone=docker --add-service=http --permanent
            sudo firewall-cmd --reload
            sudo docker-compose up -d
            # sudo docker exec -i book-store bash -c "chmod -R 777 /var/www/html/storage/"
            # sudo docker exec -i book-store bash -c '
            # if [ ! -f .env ]; then
            # cp .env.example .env
            # chmod 777 .env
            mysql -u ${{secrets.DB_USER}} -p${{secrets.DB_PASS}} -h ${{env.MySQL_IP}} -e "CREATE DATABASE IF NOT EXISTS book-store;"
            echo -e "DB_HOST=${{env.MySQL_IP}}\nDB_USERNAME=${{secrets.DB_USER}}\nDB_PASSWORD=${{secrets.DB_PASS}}" >> .env
            # chmod -R 777 /var/www/html/storage/
            # composer install
            # php artisan key:generate
            # php artisan migrate
            # fi '
            sudo docker exec -i book-store bash -c '
            file=`mysql -u ${{secrets.DB_USER}} -p${{secrets.DB_PASS}} -h ${{env.MySQL_IP}} book-store -e "SELECT COUNT(*) as count FROM users"  | cut -d \t -f 2`
            # if [ $file == "0" ]; then
            # php artisan db:seed --class=UserSeeder
            # fi '